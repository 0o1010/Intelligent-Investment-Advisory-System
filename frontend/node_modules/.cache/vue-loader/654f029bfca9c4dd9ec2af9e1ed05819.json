{"remainingRequest":"/Users/chenxuran/PycharmProjects/platform/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/chenxuran/PycharmProjects/platform/frontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/chenxuran/PycharmProjects/platform/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenxuran/PycharmProjects/platform/frontend/src/pages/Register.vue?vue&type=template&id=1f24bdc7&scoped=true&","dependencies":[{"path":"/Users/chenxuran/PycharmProjects/platform/frontend/src/pages/Register.vue","mtime":1749901129060},{"path":"/Users/chenxuran/PycharmProjects/platform/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1750470386460},{"path":"/Users/chenxuran/PycharmProjects/platform/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1750470386775},{"path":"/Users/chenxuran/PycharmProjects/platform/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1750470386460},{"path":"/Users/chenxuran/PycharmProjects/platform/frontend/node_modules/vue-loader/lib/index.js","mtime":1750470386649}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}